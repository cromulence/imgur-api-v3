buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url  "http://dl.bintray.com/cromulence/maven"
        }
    }
    dependencies {
        classpath "net.cromulence.buildsystem.gradle:travis-bintray:+"
        classpath 'com.palantir:jacoco-coverage:0.4.0'
    }
}

apply plugin: 'com.palantir.jacoco-full-report'
apply from: 'dependencies.gradle'

allprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'travis-bintray'
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    //apply plugin: 'nebula.lint'

    group = gavGroup
    //gradleLint.rules = ['all-dependency'] // add as many rules here as you'd like
    //gradleLint.rules = ['unused-dependency'] // add as many rules here as you'd like

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url  "http://dl.bintray.com/cromulence/maven"
        }
    }

    checkstyle {
        ignoreFailures = true
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }
}

subprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    project.version = rootProject.version

    compileJava {
        options.debug = true
        options.debugOptions.debugLevel = "source,lines,vars"
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }
    compileTestJava {
        options.debugOptions.debugLevel = "source,lines,vars"
    }
    javadoc {
        options.encoding = 'UTF-8'
    }

    // Clean Eclipse output directory as the Eclipse plugin does not do this by default
    clean.doFirst {
        delete 'bin'
    }

    compileJava.options.debug = true
    compileJava.options.debugOptions.debugLevel = "source,lines,vars"
    compileTestJava.options.debugOptions.debugLevel = "source,lines,vars"
    compileJava.options.encoding = 'UTF-8'

    eclipse {
        classpath {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    test {
        testLogging {
            // Make sure we show the full stack trace for test failures
            exceptionFormat 'full'

            // Make sure the skipped and failed tests are logged
            events 'skipped', 'failed'

            // Projects may decide to enable extra logging for tests
            // events 'started', 'passed'        // Log start and passed events
            // showStandardStreams = true        // Show console output from the running tests

        }
    }
    if(System.env['JAVA_HOME'] == null){
        throw new GradleException('JAVA_HOME not set')
    }
}

task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootProject.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    //xml.destination "${buildDir}/reports/jacoco/report.xml"
    html.enabled true
    csv.enabled true
  }
}

task jacocoMerge(type: JacocoMerge) {
  dependsOn(subprojects.jacocoTestReport.dependsOn)
  mustRunAfter(subprojects.jacocoTestReport.mustRunAfter)
  destinationFile = file("${buildDir}/jacoco/test.exec")
  executionData = files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() }
}

codeCoverageReport.dependsOn {
  subprojects*.test
}

configurations {
    published
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}
