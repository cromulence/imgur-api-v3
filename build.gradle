buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'gradle.plugin.co.riiid:gradle-github-plugin:0.4.2'   
    }
}

//plugins loaded from special gradle plugin repo...
plugins {
    //google "gradle build scan" or https://github.com/gradle/gradle-build-scan-quickstart
    // essentially, ./gradlew build -Dscan
    id 'com.gradle.build-scan' version '1.0' //google "gradle build scan"
    id "maven-publish"
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.2.1"
    id 'jacoco'
}

repositories {
  maven {
    url "artifactregistry://europe-west2-maven.pkg.dev/cromulence/nexus"
  }
}

apply from: 'dependencies.gradle'

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: "com.google.cloud.artifactregistry.gradle-plugin"

    //apply plugin: 'nebula.lint'

    group = gavGroup
    //gradleLint.rules = ['all-dependency'] // add as many rules here as you'd like
    //gradleLint.rules = ['unused-dependency'] // add as many rules here as you'd like

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url  "artifactregistry://europe-west2-maven.pkg.dev/cromulence/nexus"
        }
    }

    checkstyle {
        ignoreFailures = true
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }
}

subprojects {

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    project.version = rootProject.version

    java {
        withSourcesJar()
        withJavadocJar()
    }

    compileJava {
        options.debug = true
        options.debugOptions.debugLevel = "source,lines,vars"
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }
    compileTestJava {
        options.debugOptions.debugLevel = "source,lines,vars"
    }
    javadoc {
        options.encoding = 'UTF-8'
    }

    // Clean Eclipse output directory as the Eclipse plugin does not do this by default
    clean.doFirst {
        delete 'bin'
    }

    compileJava.options.debug = true
    compileJava.options.debugOptions.debugLevel = "source,lines,vars"
    compileTestJava.options.debugOptions.debugLevel = "source,lines,vars"
    compileJava.options.encoding = 'UTF-8'

    eclipse {
        classpath {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    test {
        testLogging {
            // Make sure we show the full stack trace for test failures
            exceptionFormat 'full'

            // Make sure the skipped and failed tests are logged
            events 'skipped', 'failed'

            // Projects may decide to enable extra logging for tests
            // events 'started', 'passed'        // Log start and passed events
            // showStandardStreams = true        // Show console output from the running tests

        }
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }

    // if(System.env['JAVA_HOME'] == null){
    //     throw new GradleException('JAVA_HOME not set')
    // }

    if (project.plugins.hasPlugin('java')) {
        configurations {
            published
        }
    }

    publishing {
      repositories {
        maven {
          url "artifactregistry://europe-west2-maven.pkg.dev/cromulence/nexus"
        }
      }

      publications {
        mavenJava(MavenPublication) {
          groupId  gavGroup
          from components.java
        }
      }
    }

}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = "sources"
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootProject.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        //xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled true
        csv.enabled true
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

configurations {
    published
}

wrapper {
    gradleVersion = '7.6'
}
